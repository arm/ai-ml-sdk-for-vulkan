#
# SPDX-FileCopyrightText: Copyright 2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
# SPDX-License-Identifier: Apache-2.0
#
name: Build ML SDK (manifest + overrides)

on:
  workflow_call:
    inputs:
      overrides_json: { type: string, required: true }

permissions:
  contents: read
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/arm/ml-sdk-linux-amd64:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user root

    steps:
      - name: Clone repositories and build
        env:
          MANIFEST_URL: https://github.com/arm/ai-ml-sdk-manifest.git
          REPO_DIR:     ${{ github.workspace }}/sdk
          INSTALL_DIR:  ${{ github.workspace }}/install
          OVERRIDES:    ${{ inputs.overrides_json }}
        run: |
          mkdir -p $REPO_DIR && cd $REPO_DIR

          # Initialize the default manifest state
          repo init -u $MANIFEST_URL
          repo sync --no-clone-bundle -j $(nproc)

          mkdir -p .repo/local_manifests
          echo '<manifest>' > .repo/local_manifests/override.xml
          echo "$OVERRIDES" | jq -r 'to_entries[] | "<project name=\"\(.key)\" remote="github" revision=\"\(.value)\"/>"' >> .repo/local_manifests/override.xml
          echo '</manifest>' >> .repo/local_manifests/override.xml

          # Resolve each project's path from the active manifest and re-sync it
          for NAME in $(echo "$OVERRIDES" | jq -r 'keys[]'); do
            PROJECT_PATH=$(repo manifest -r | xmlstarlet sel -t -v "//project[@name='${NAME}']/@path")
            if [ -z "$PROJECT_PATH" ]; then
              echo "ERROR: project path for $NAME not found in manifest"
              exit 1
            fi
            echo "Syncing $NAME ($PROJECT_PATH)"
            repo sync -j"$(nproc)" --force-sync "$PROJECT_PATH"
          done

          echo "Build VGF-Lib"
          ./sw/vgf-lib/scripts/build.py -j $(nproc) --doc --test

          echo "Build Model Converter"
          ./sw/model-converter/scripts/build.py -j $(nproc) --doc --test

          echo "Build Emulation Layer"
          export VK_LAYER_PATH=$INSTALL_DIR/share/vulkan/explicit_layer.d
          export LD_LIBRARY_PATH=$INSTALL_DIR/lib
          ./sw/emulation-layer/scripts/build.py -j $(nproc) --doc --test --install $INSTALL_DIR

          echo "Build Scenario Runner"
          export VK_INSTANCE_LAYERS=VK_LAYER_ML_Graph_Emulation:VK_LAYER_ML_Tensor_Emulation
          ./sw/scenario-runner/scripts/build.py -j $(nproc) --doc --test

          echo "Build SDK Root"
          ./scripts/build.py -j $(nproc) --doc
