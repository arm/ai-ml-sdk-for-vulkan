#
# SPDX-FileCopyrightText: Copyright 2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
# SPDX-License-Identifier: Apache-2.0
#
name: Build and Publish Linux Docker Image

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'docker/Dockerfile'
      - '.github/workflows/publish-linux-docker-image.yml'

concurrency:
    group: ${{ github.workflow }}
    cancel-in-progress: false

jobs:
  docker-build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tag, and cache scope
        id: meta
        shell: bash
        run: |          
          echo "tag=ghcr.io/${{ github.repository_owner }}/ml-sdk-linux-amd64:latest" >> $GITHUB_ENV
          
          # cache scope (for gha cache)
          echo "cache_scope=ml-sdk-linux-amd64" >> $GITHUB_ENV
          
          # separate registry cache tag (DO NOT use the image tag here)
          echo "cache_ref=ghcr.io/${{ github.repository_owner }}/ml-sdk-linux-amd64:buildcache" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          tags: ${{ env.tag }}
          push: true

          # 1) Share GHA cache across runs with a stable per-arch scope
          # 2) Also store cache in GHCR under a dedicated cache tag
          cache-from: |
            ${{ format('type=gha,scope={0}', env.cache_scope) }}
            ${{ format('type=registry,ref={0}', env.cache_ref) }}

          cache-to: |
            ${{ format('type=gha,mode=max,scope={0}', env.cache_scope) }}
            ${{ format('type=registry,ref={0},mode=max', env.cache_ref) }}